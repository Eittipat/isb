# How to integrate ISB compiler and runtime into Unity games

## Build the ISB assembly

```
cd csharp
dotnet restore
dotnet Build
```

The output dll will be at `csharp/ISB/bin/Debug/netstandard2.0/ISB.dll`

## Create a Unity project

Initiate the scene and the game objects in Unity. Typically, we need a multi-line input field to input BASIC code, and
a button to trigger the code execution.

![](screenshots/01.png)

## Import the ISB assembly

Makes a `Scripts` dir under `Asserts` of the Unity project.

Copy `csharp/ISB/bin/Debug/netstandard2.0/ISB.dll` into the `Scripts` folder.

## Connect Unity and ISB with C# code

Create `Game.cs` under `Asserts/Scripts'. The class defined in `Game.cs` will be registered as an ISB external lib
by the main program.

```
// Game.cs
public class Game
{
    [Doc("Example lib function to access Unity objects.")]
    public void AddBall(NumberValue x, NumberValue y, NumberValue z)
    {
        GameObject prefab = Resources.Load<GameObject>("Prefabs/Sphere");
        if (prefab != null)
        {
            Object.Instantiate(prefab,
                new Vector3((float)x.ToNumber(), (float)y.ToNumber(), (float)z.ToNumber()),
                Quaternion.identity);
        }
        else
        {
            Debug.Log("Failed to load prefab.");
        }
    }
}
```

The lib funciton `AddBall` simply loads the sphere prefab and instantiates a clone object then places it at the
location specified by the function's arguments.

In-game BASIC code can invoke `AddBall(x, y, z)` to put balls onto the scene.

Then, creates an empty GameObject in Unity to host the main program `Program.cs`.

```
// Program.cs
public class Program : MonoBehaviour
{
    public Button uiButton;
    public InputField uiInput;
    public GameObject objBall;

    void Start()
    {
        uiButton.onClick.AddListener(onButtonClick);
    }

    void Update()
    {
    }

    void onButtonClick()
    {
        string code = uiInput.text;
        Debug.Log(code);

        Engine engine = new Engine("Unity", new Type[] { typeof(Game) });
        if (engine.Compile(code, true) && engine.Run(true))
        {
            if (engine.StackCount > 0)
            {
                string ret = engine.StackTop.ToDisplayString();
                Debug.Log(ret);
            }
        }
        else
        {
            foreach (var content in engine.ErrorInfo.Contents)
            {
                Debug.Log(content.ToDisplayString());
            }
        }
    }
}
```

The code line `Engine engine = new Engine("Unity", new Type[] { typeof(Game) });` registers the class `Game` into
the ISB engine.

The click event handler of the button reads the input BASIC code from the input field then compiles and runs the code
with the ISB engine. Error messages got from the ISB engine will be reported to Unity's `Debug.Log`.

## Start the game and execute BASIC code in game

Start the Unity game. Type the following example code into the input field:

```
For x = -3 To 3
  For z = -3 To 3
     Game.AddBall(x, 5, z)
  EndFor
EndFor
```

Click the "Run" button.

49 bouncing balls will be put onto the main scene. Enjoy them!

![](screenshots/02.png)

![](screenshots/03.gif)
